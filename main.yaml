---
- name: Deploy NestJS Boilerplate
  hosts: hng
  become: yes

  tasks:
    - name: Create hng user
      user:
        name: hng
        groups: sudo
        shell: /bin/bash

    - name: Update apt cache
      apt: 
        update_cache: yes
    
    - name: Install Node.js
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
        sudo apt-get install -y nodejs

    - name: Install ACL
      apt:
        name: acl
        state: present

    - name: Check if app directory exists and is not empty
      stat:
        path: /opt/stage_5b
      register: app_dir_stat

    - name: Remove existing app directory if it exists and is not empty
      file:
        path: /opt/stage_5b
        state: absent
      when: app_dir_stat.stat.exists and app_dir_stat.stat.size > 0

    - name: Ensure app directory exists
      file:
        path: /opt/stage_5b
        state: directory
        mode: '0755'
        owner: hng
        group: hng

    - name: Clone repository
      become: yes
      become_user: hng
      git:
        repo: 'https://github.com/hngprojects/hng_boilerplate_nestjs.git'
        version: devops
        dest: /opt/stage_5b
        force: yes

    - name: Ensure hng owns app directory
      file:
        path: /opt/stage_5b
        owner: hng
        group: hng
        recurse: yes

    - name: Install base dependencies
      apt:
        name: 
          - git 
          - npm
          - postgresql
          - ufw
        state: present

    - name: Add Nginx GPG key
      apt_key:
        url: 'https://nginx.org/keys/nginx_signing.key'
        state: present
        
    - name: Add Nginx official repository
      apt_repository:
        repo: 'deb http://nginx.org/packages/ubuntu/ {{ ansible_distribution_release | lower }} nginx'
        state: present
        filename: nginx
        
    - name: Install Nginx 1.26
      apt:
        name: nginx=1.26.*
        state: present
        update_cache: yes
        allow_downgrade: yes

    - name: Install NestJS CLI globally
      npm:
        name: '@nestjs/cli'
        global: yes

    - name: Install project dependencies
      npm:
        path: /opt/stage_5b
      become: yes

    - name: Create .env file
      copy:
        content: |
          PROFILE=local
          NODE_ENV=development
          PORT=3000
          DB_USERNAME=bala
          DB_PASSWORD=Dongnaan13
          DB_DATABASE=lanky
          DB_HOST=localhost
          DB_PORT=5432
          DB_ENTITIES="dist/src/modules/**/entities/**/*.entity{.ts,.js}"
          DB_MIGRATIONS="dist/**/migrations/*{.ts,.js}"
          DB_TYPE=postgres
          DB_SSL="false"
          JWT_SECRET=someSecrets
          JWT_EXPIRY_TIMEFRAME=3600
        dest: /opt/stage_5b/.env
        owner: hng
        group: hng
        mode: '0600'
      notify: Restart application

    - name: Configure PostgreSQL
      become: yes
      become_user: postgres
      shell: |
        psql -c "CREATE DATABASE lanky;"
        psql -c "CREATE USER bala WITH ENCRYPTED PASSWORD 'Dongnaan13';"
        psql -c "GRANT ALL PRIVILEGES ON DATABASE lanky TO bala;"
        psql -d lanky -c "GRANT USAGE ON SCHEMA public TO bala;"
        psql -d lanky -c "GRANT CREATE ON SCHEMA public TO bala;"
        psql -d lanky -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO bala;"
      args:
        executable: /bin/bash

    - name: Create secrets directory
      file:
        path: /var/secrets
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Save PostgreSQL credentials
      copy:
        content: "DB_USER=bala\nDB_PASSWORD=Dongnaan13"
        dest: /var/secrets/pg_pw.txt
        mode: '0600'

    - name: Install typeorm globally
      npm:
        name: typeorm
        global: yes
        state: present

    - name: Install RabbitMQ
      apt:
        name: rabbitmq-server
        state: present
        update_cache: yes

    - name: Set RabbitMQ default user and password
      shell:
        cmd: rabbitmqctl change_password guest guest

    - name: Ensure RabbitMQ service is enabled and started
      systemd:
        name: rabbitmq-server
        state: started
        enabled: yes

    - name: Configure UFW
      block:
        - name: Reset UFW to default
          ufw:
            state: reset

        - name: Allow SSH (port 22)
          ufw:
            rule: allow
            port: '22'

        - name: Allow HTTP (port 80)
          ufw:
            rule: allow
            port: '80'

        - name: Deny access to port 3000
          ufw:
            rule: deny
            port: '3000'

        - name: Enable UFW
          ufw:
            state: enabled

      rescue:
        - name: UFW Status
          command: ufw status
          register: ufw_status

        - name: Display UFW Status
          debug:
            var: ufw_status.stdout_lines
    
    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: Restart Nginx

    - name: Set up custom Nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/conf.d/app.conf
        mode: '0644'
        owner: root
        group: root
      notify: Restart Nginx

    - name: Create log directory
      file:
        path: /var/log/stage_5b
        state: directory
        owner: hng
        group: hng
        mode: '0755'

    - name: Create log files
      file:
        path: "{{ item }}"
        state: touch
        owner: hng
        group: hng
        mode: '0644'
      loop:
        - /var/log/stage_5b/error.log
        - /var/log/stage_5b/out.log

    - name: Build NestJS application
      shell: cd /opt/stage_5b && npm run build
      become_user: hng

    - name: Set up systemd service
      template:
        src: nestjs.service.j2
        dest: /etc/systemd/system/nestjs.service
      notify: Restart application

  handlers:
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Restart application
      systemd:
        name: nestjs
        state: restarted
        daemon_reload: yes

    - name: Enable application service
      systemd:
        name: nestjs
        enabled: yes
        state: started
