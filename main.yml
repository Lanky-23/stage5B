---
- name: Setup Stage 5b Environment
  hosts: hng
  become: yes
  vars:
    db_admin_user: "postgres"
    db_admin_password: "admin_password"
    boilerplate_name: "boilerplate_db"
    app_dir: /opt/stage_5b
    rabbitmq_password: guest
    log_dir: /var/log/stage_5b
    app_user: hng
    db_name: boilerplate_db
    db_user: admin
    db_password: supersecurepassword
    profile: local
    node_env: development
    port: 3000
    db_host: localhost
    db_port: 5432
    db_entities: "dist/src/modules/**/entities/**/*.entity{.ts,.js}"
    db_migrations: "dist/**/migrations/*{.ts,.js}"
    db_type: postgres
    db_ssl: "false"
    jwt_secret: someSecrets
    jwt_expiry_timeframe: 3600

  tasks:
    - name: Install Node.js and npm
      apt:
        name:
          - nodejs
          - npm
        state: present
        update_cache: yes

    - name: Create hng user with sudo privileges
      ansible.builtin.user:
        name: hng
        state: present
        shell: /bin/bash
        groups: sudo

    - name: Ensure /opt directory exists
      ansible.builtin.file:
        path: /opt
        state: directory

    - name: Change ownership of /opt directory
      ansible.builtin.file:
        path: /opt
        state: directory
        owner: hng
        group: hng

    - name: Create destination directory for cloning
      ansible.builtin.file:
        path: /opt/stage_5b
        state: directory
        owner: hng
        group: hng

    - name: Add /opt/stage_5b as a safe directory for Git
      ansible.builtin.shell:
        cmd: git config --global --add safe.directory /opt/stage_5b

    - name: Clone the DevOps branch of the repository
      ansible.builtin.git:
        repo: 'https://github.com/hngprojects/hng_boilerplate_nestjs.git'
        dest: /opt/stage_5b
        version: devops
        force: yes

    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present
        update_cache: yes

    - name: Ensure PostgreSQL service is running
      ansible.builtin.systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Save PostgreSQL admin password
      ansible.builtin.copy:
        dest: /var/secrets/pg_pw.txt
        content: |
          POSTGRES_PASSWORD={{ db_admin_password }}
        mode: '0600'
        owner: root
        group: root

    - name: Check if PostgreSQL database exists
      ansible.builtin.shell:
        cmd: sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ boilerplate_name }}'"
      register: db_check
      changed_when: false

    - name: Create PostgreSQL database if not exists
      ansible.builtin.shell:
        cmd: sudo -u postgres psql -c "CREATE DATABASE {{ boilerplate_name }};"
      when: db_check.stdout != '1'
      register: db_creation

    - name: Create PostgreSQL user if not exists
      ansible.builtin.shell:
        cmd: sudo -u postgres psql -c "CREATE USER {{ db_user }} WITH PASSWORD '{{ db_pass }}';"
      when: db_check.stdout != '1'

    - name: Grant permissions to PostgreSQL user
      ansible.builtin.shell:
        cmd: sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ boilerplate_name }} TO {{ db_user }};"
      when: db_check.stdout != '1'

    - name: Debug database creation
      ansible.builtin.debug:
        msg: "Database {{ boilerplate_name }} was created."
      when: db_check.stdout != '1' and db_creation.changed

    - name: Debug existing database
      ansible.builtin.debug:
        msg: "Database {{ boilerplate_name }} already exists. Skipping creation."
      when: db_check.stdout == '1'

    - name: Install RabbitMQ
      apt:
        name: rabbitmq-server
        state: present
        update_cache: yes

    - name: Set RabbitMQ default user and password
      ansible.builtin.shell:
        cmd: rabbitmqctl change_password guest {{ rabbitmq_password }}

    - name: Add Nginx GPG key
      apt_key:
        url: 'https://nginx.org/keys/nginx_signing.key'
        state: present

    - name: Add Nginx official repository
      apt_repository:
        repo: 'deb http://nginx.org/packages/ubuntu/ {{ ansible_distribution_release | lower }} nginx'
        state: present
        filename: nginx

    - name: Install Nginx 1.26
      apt:
        name: nginx=1.26.*

        state: present
        update_cache: yes
        allow_downgrade: yes

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: Restart Nginx

    - name: Configure Nginx
      ansible.builtin.copy:
        content: |
          server {
            listen 80;
            server_name _;
            location / {
              proxy_pass http://127.0.0.1:3000;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
          }
        dest: /etc/nginx/conf.d/app.conf
        owner: root
        group: root
        mode: '0644'
        notify: Restart Nginx

    - name: Ensure /var/log/stage_5b directory exists
      ansible.builtin.file:
        path: /var/log/stage_5b
        state: directory
        owner: hng
        group: hng
        mode: '0755'

    - name: Set up logging for stderr
      ansible.builtin.file:
        path: /var/log/stage_5b/error.log
        state: touch
        owner: hng
        group: hng
        mode: '0644'

    - name: Set up logging for stdout
      ansible.builtin.file:
        path: /var/log/stage_5b/out.log
        state: touch
        owner: hng
        group: hng
        mode: '0644'

    - name: Create .env file
      copy:
        content: |
          PROFILE={{ profile }}
          NODE_ENV={{ node_env }}
          PORT={{ port }}
          DB_USERNAME={{ db_user }}
          DB_PASSWORD={{ db_password }}
          DB_DATABASE={{ db_name }}
          DB_HOST={{ db_host }}
          DB_PORT={{ db_port }}
          DB_ENTITIES={{ db_entities }}
          DB_MIGRATIONS={{ db_migrations }}
          DB_TYPE={{ db_type }}
          DB_SSL={{ db_ssl }}
          JWT_SECRET={{ jwt_secret }}
          JWT_EXPIRY_TIMEFRAME={{ jwt_expiry_timeframe }}
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      notify: Restart application

    - name: Change ownership of application directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
   

    - name: Install project dependencies
      npm:
        path: "{{ app_dir }}"
      become: yes

    - name: Build NestJS application
      shell: npm run build
      args:
        chdir: "{{ app_dir }}"
      become: yes
      

    - name: Set up systemd service
      template:
        src: nestjs.service.j2
        dest:  /etc/systemd/system/nestjs.service  
      notify: Restart application

    - name: Test become_user
      shell: |
        touch /home/hng/testfile.txt
        ls -l /home/hng/testfile.txt
      become: yes
      
      register: testfile_result

    - name: Debug test file creation
      ansible.builtin.debug:
        msg: "Test file created and permissions verified: {{ testfile_result.stdout }}"

  handlers:
    - name: Restart application
      systemd:
        name: nestjs
        state: restarted
        enabled: yes
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
